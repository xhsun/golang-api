// Code generated by mockery v2.24.0. DO NOT EDIT.

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIEmployeeRepository is an autogenerated mock type for the IEmployeeRepository type
type MockIEmployeeRepository struct {
	mock.Mock
}

type MockIEmployeeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIEmployeeRepository) EXPECT() *MockIEmployeeRepository_Expecter {
	return &MockIEmployeeRepository_Expecter{mock: &_m.Mock}
}

// AddEmployee provides a mock function with given fields: ctx, gender
func (_m *MockIEmployeeRepository) AddEmployee(ctx context.Context, gender string) (int, error) {
	ret := _m.Called(ctx, gender)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, gender)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, gender)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, gender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIEmployeeRepository_AddEmployee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEmployee'
type MockIEmployeeRepository_AddEmployee_Call struct {
	*mock.Call
}

// AddEmployee is a helper method to define mock.On call
//   - ctx context.Context
//   - gender string
func (_e *MockIEmployeeRepository_Expecter) AddEmployee(ctx interface{}, gender interface{}) *MockIEmployeeRepository_AddEmployee_Call {
	return &MockIEmployeeRepository_AddEmployee_Call{Call: _e.mock.On("AddEmployee", ctx, gender)}
}

func (_c *MockIEmployeeRepository_AddEmployee_Call) Run(run func(ctx context.Context, gender string)) *MockIEmployeeRepository_AddEmployee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIEmployeeRepository_AddEmployee_Call) Return(_a0 int, _a1 error) *MockIEmployeeRepository_AddEmployee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIEmployeeRepository_AddEmployee_Call) RunAndReturn(run func(context.Context, string) (int, error)) *MockIEmployeeRepository_AddEmployee_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmployees provides a mock function with given fields: ctx
func (_m *MockIEmployeeRepository) GetEmployees(ctx context.Context) ([]Employee, error) {
	ret := _m.Called(ctx)

	var r0 []Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Employee, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Employee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIEmployeeRepository_GetEmployees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmployees'
type MockIEmployeeRepository_GetEmployees_Call struct {
	*mock.Call
}

// GetEmployees is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIEmployeeRepository_Expecter) GetEmployees(ctx interface{}) *MockIEmployeeRepository_GetEmployees_Call {
	return &MockIEmployeeRepository_GetEmployees_Call{Call: _e.mock.On("GetEmployees", ctx)}
}

func (_c *MockIEmployeeRepository_GetEmployees_Call) Run(run func(ctx context.Context)) *MockIEmployeeRepository_GetEmployees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIEmployeeRepository_GetEmployees_Call) Return(_a0 []Employee, _a1 error) *MockIEmployeeRepository_GetEmployees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIEmployeeRepository_GetEmployees_Call) RunAndReturn(run func(context.Context) ([]Employee, error)) *MockIEmployeeRepository_GetEmployees_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockIEmployeeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIEmployeeRepository creates a new instance of MockIEmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIEmployeeRepository(t mockConstructorTestingTNewMockIEmployeeRepository) *MockIEmployeeRepository {
	mock := &MockIEmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
